type dockData @model @aws_iam @aws_cognito_user_pools {
  id: ID!
  drift: [Operation]
  weather:[Weather]
  alarms:[Alarm]
  status:[Status]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type dock @model @aws_iam @aws_cognito_user_pools {
id:ID!
name:String
location:[Float]
drift: [Operation]
weather:[Weather]
alarms:[Alarm]
data:dockData @connection(fields:["id"])

}

# type AlarmObj @aws_iam  @aws_cognito_user_pools{
 
#   id:String
#   value:String
#   message:String
  

# }


type loggingTest @model  @aws_iam @aws_cognito_user_pools {
id:AWSDateTime!
ferry:String
alarmType:String
data:[AWSJSON]
timeStamp:AWSTimestamp
createdAt: AWSDateTime
updatedAt: AWSDateTime
}

type Weather  @aws_iam @aws_cognito_user_pools {
  name:String
  value:String
  icon:String
  unit:String
}

type Operation  @aws_iam @aws_cognito_user_pools {
  name:String
  value:String
  icon:String
  unit:String
}

type Alarm  @aws_iam @aws_cognito_user_pools {
id:ID!
value:String
name:String

}

type Status  @aws_iam @aws_cognito_user_pools {

value:String
name:String

}
 type Subscription @aws_iam  @aws_cognito_user_pools{
   onUpdateById(id: ID!): dockData
     @aws_subscribe(mutations: ["updateDockData"])
 }

input betweenQuery {
startDate:AWSDateTime
endDate:AWSDateTime

}
